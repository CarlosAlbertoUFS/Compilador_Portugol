/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpAritimetrica().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAAdicaoSubtracaoExpAritimetrica(AAdicaoSubtracaoExpAritimetrica node)
    {
        defaultIn(node);
    }

    public void outAAdicaoSubtracaoExpAritimetrica(AAdicaoSubtracaoExpAritimetrica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdicaoSubtracaoExpAritimetrica(AAdicaoSubtracaoExpAritimetrica node)
    {
        inAAdicaoSubtracaoExpAritimetrica(node);
        if(node.getExpAritimetrica() != null)
        {
            node.getExpAritimetrica().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAAdicaoSubtracaoExpAritimetrica(node);
    }

    public void inATermoExpAritimetrica(ATermoExpAritimetrica node)
    {
        defaultIn(node);
    }

    public void outATermoExpAritimetrica(ATermoExpAritimetrica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpAritimetrica(ATermoExpAritimetrica node)
    {
        inATermoExpAritimetrica(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExpAritimetrica(node);
    }

    public void inAAdicaoSoma(AAdicaoSoma node)
    {
        defaultIn(node);
    }

    public void outAAdicaoSoma(AAdicaoSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdicaoSoma(AAdicaoSoma node)
    {
        inAAdicaoSoma(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAAdicaoSoma(node);
    }

    public void inASubtracaoSoma(ASubtracaoSoma node)
    {
        defaultIn(node);
    }

    public void outASubtracaoSoma(ASubtracaoSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoSoma(ASubtracaoSoma node)
    {
        inASubtracaoSoma(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outASubtracaoSoma(node);
    }

    public void inAMultiplicacaoDivisaoTermo(AMultiplicacaoDivisaoTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoDivisaoTermo(AMultiplicacaoDivisaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoDivisaoTermo(AMultiplicacaoDivisaoTermo node)
    {
        inAMultiplicacaoDivisaoTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultiplicacaoDivisaoTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        inAMultiplicacaoMult(node);
        if(node.getEstrela() != null)
        {
            node.getEstrela().apply(this);
        }
        outAMultiplicacaoMult(node);
    }

    public void inADivisaoMult(ADivisaoMult node)
    {
        defaultIn(node);
    }

    public void outADivisaoMult(ADivisaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoMult(ADivisaoMult node)
    {
        inADivisaoMult(node);
        if(node.getBarraDir() != null)
        {
            node.getBarraDir().apply(this);
        }
        outADivisaoMult(node);
    }

    public void inANumeroInteiroFator(ANumeroInteiroFator node)
    {
        defaultIn(node);
    }

    public void outANumeroInteiroFator(ANumeroInteiroFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroInteiroFator(ANumeroInteiroFator node)
    {
        inANumeroInteiroFator(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outANumeroInteiroFator(node);
    }

    public void inANumeroRealFator(ANumeroRealFator node)
    {
        defaultIn(node);
    }

    public void outANumeroRealFator(ANumeroRealFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealFator(ANumeroRealFator node)
    {
        inANumeroRealFator(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANumeroRealFator(node);
    }

    public void inAExpParentesesFator(AExpParentesesFator node)
    {
        defaultIn(node);
    }

    public void outAExpParentesesFator(AExpParentesesFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpParentesesFator(AExpParentesesFator node)
    {
        inAExpParentesesFator(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getExpAritimetrica() != null)
        {
            node.getExpAritimetrica().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAExpParentesesFator(node);
    }
}
