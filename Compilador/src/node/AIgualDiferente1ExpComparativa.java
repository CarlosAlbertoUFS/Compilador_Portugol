/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIgualDiferente1ExpComparativa extends PExpComparativa
{
    private PElemento _esq_;
    private PSimbolo1 _simbolo1_;
    private PElemento _dir_;

    public AIgualDiferente1ExpComparativa()
    {
        // Constructor
    }

    public AIgualDiferente1ExpComparativa(
        @SuppressWarnings("hiding") PElemento _esq_,
        @SuppressWarnings("hiding") PSimbolo1 _simbolo1_,
        @SuppressWarnings("hiding") PElemento _dir_)
    {
        // Constructor
        setEsq(_esq_);

        setSimbolo1(_simbolo1_);

        setDir(_dir_);

    }

    @Override
    public Object clone()
    {
        return new AIgualDiferente1ExpComparativa(
            cloneNode(this._esq_),
            cloneNode(this._simbolo1_),
            cloneNode(this._dir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIgualDiferente1ExpComparativa(this);
    }

    public PElemento getEsq()
    {
        return this._esq_;
    }

    public void setEsq(PElemento node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    public PSimbolo1 getSimbolo1()
    {
        return this._simbolo1_;
    }

    public void setSimbolo1(PSimbolo1 node)
    {
        if(this._simbolo1_ != null)
        {
            this._simbolo1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simbolo1_ = node;
    }

    public PElemento getDir()
    {
        return this._dir_;
    }

    public void setDir(PElemento node)
    {
        if(this._dir_ != null)
        {
            this._dir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dir_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._esq_)
            + toString(this._simbolo1_)
            + toString(this._dir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        if(this._simbolo1_ == child)
        {
            this._simbolo1_ = null;
            return;
        }

        if(this._dir_ == child)
        {
            this._dir_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._esq_ == oldChild)
        {
            setEsq((PElemento) newChild);
            return;
        }

        if(this._simbolo1_ == oldChild)
        {
            setSimbolo1((PSimbolo1) newChild);
            return;
        }

        if(this._dir_ == oldChild)
        {
            setDir((PElemento) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
